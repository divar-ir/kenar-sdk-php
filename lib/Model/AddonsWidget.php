<?php
/**
 * AddonsWidget
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * AddonsWidget Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddonsWidget implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'addonsWidget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'button_bar' => '\Divar\KenarApiClient\Model\AddonsButtonBar',
        'description_row' => '\Divar\KenarApiClient\Model\AddonsDescriptionRow',
        'evaluation_row' => '\Divar\KenarApiClient\Model\AddonsEvaluationRow',
        'event_row' => '\Divar\KenarApiClient\Model\AddonsEventRow',
        'group_info_row' => '\Divar\KenarApiClient\Model\AddonsGroupInfoRow',
        'image_carousel_row' => '\Divar\KenarApiClient\Model\AddonsImageCarouselRow',
        'score_row' => '\Divar\KenarApiClient\Model\AddonsScoreRow',
        'selector_row' => '\Divar\KenarApiClient\Model\AddonsSelectorRow',
        'semantic_paths' => 'array<string,string>',
        'subtitle_row' => '\Divar\KenarApiClient\Model\AddonsSubtitleRow',
        'title_row' => '\Divar\KenarApiClient\Model\AddonsTitleRow'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'button_bar' => null,
        'description_row' => null,
        'evaluation_row' => null,
        'event_row' => null,
        'group_info_row' => null,
        'image_carousel_row' => null,
        'score_row' => null,
        'selector_row' => null,
        'semantic_paths' => null,
        'subtitle_row' => null,
        'title_row' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'button_bar' => false,
        'description_row' => false,
        'evaluation_row' => false,
        'event_row' => false,
        'group_info_row' => false,
        'image_carousel_row' => false,
        'score_row' => false,
        'selector_row' => false,
        'semantic_paths' => false,
        'subtitle_row' => false,
        'title_row' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'button_bar' => 'button_bar',
        'description_row' => 'description_row',
        'evaluation_row' => 'evaluation_row',
        'event_row' => 'event_row',
        'group_info_row' => 'group_info_row',
        'image_carousel_row' => 'image_carousel_row',
        'score_row' => 'score_row',
        'selector_row' => 'selector_row',
        'semantic_paths' => 'semantic_paths',
        'subtitle_row' => 'subtitle_row',
        'title_row' => 'title_row'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'button_bar' => 'setButtonBar',
        'description_row' => 'setDescriptionRow',
        'evaluation_row' => 'setEvaluationRow',
        'event_row' => 'setEventRow',
        'group_info_row' => 'setGroupInfoRow',
        'image_carousel_row' => 'setImageCarouselRow',
        'score_row' => 'setScoreRow',
        'selector_row' => 'setSelectorRow',
        'semantic_paths' => 'setSemanticPaths',
        'subtitle_row' => 'setSubtitleRow',
        'title_row' => 'setTitleRow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'button_bar' => 'getButtonBar',
        'description_row' => 'getDescriptionRow',
        'evaluation_row' => 'getEvaluationRow',
        'event_row' => 'getEventRow',
        'group_info_row' => 'getGroupInfoRow',
        'image_carousel_row' => 'getImageCarouselRow',
        'score_row' => 'getScoreRow',
        'selector_row' => 'getSelectorRow',
        'semantic_paths' => 'getSemanticPaths',
        'subtitle_row' => 'getSubtitleRow',
        'title_row' => 'getTitleRow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('button_bar', $data ?? [], null);
        $this->setIfExists('description_row', $data ?? [], null);
        $this->setIfExists('evaluation_row', $data ?? [], null);
        $this->setIfExists('event_row', $data ?? [], null);
        $this->setIfExists('group_info_row', $data ?? [], null);
        $this->setIfExists('image_carousel_row', $data ?? [], null);
        $this->setIfExists('score_row', $data ?? [], null);
        $this->setIfExists('selector_row', $data ?? [], null);
        $this->setIfExists('semantic_paths', $data ?? [], null);
        $this->setIfExists('subtitle_row', $data ?? [], null);
        $this->setIfExists('title_row', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets button_bar
     *
     * @return \Divar\KenarApiClient\Model\AddonsButtonBar|null
     */
    public function getButtonBar()
    {
        return $this->container['button_bar'];
    }

    /**
     * Sets button_bar
     *
     * @param \Divar\KenarApiClient\Model\AddonsButtonBar|null $button_bar button_bar
     *
     * @return self
     */
    public function setButtonBar($button_bar)
    {
        if (is_null($button_bar)) {
            throw new \InvalidArgumentException('non-nullable button_bar cannot be null');
        }
        $this->container['button_bar'] = $button_bar;

        return $this;
    }

    /**
     * Gets description_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsDescriptionRow|null
     */
    public function getDescriptionRow()
    {
        return $this->container['description_row'];
    }

    /**
     * Sets description_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsDescriptionRow|null $description_row description_row
     *
     * @return self
     */
    public function setDescriptionRow($description_row)
    {
        if (is_null($description_row)) {
            throw new \InvalidArgumentException('non-nullable description_row cannot be null');
        }
        $this->container['description_row'] = $description_row;

        return $this;
    }

    /**
     * Gets evaluation_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsEvaluationRow|null
     */
    public function getEvaluationRow()
    {
        return $this->container['evaluation_row'];
    }

    /**
     * Sets evaluation_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsEvaluationRow|null $evaluation_row evaluation_row
     *
     * @return self
     */
    public function setEvaluationRow($evaluation_row)
    {
        if (is_null($evaluation_row)) {
            throw new \InvalidArgumentException('non-nullable evaluation_row cannot be null');
        }
        $this->container['evaluation_row'] = $evaluation_row;

        return $this;
    }

    /**
     * Gets event_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsEventRow|null
     */
    public function getEventRow()
    {
        return $this->container['event_row'];
    }

    /**
     * Sets event_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsEventRow|null $event_row event_row
     *
     * @return self
     */
    public function setEventRow($event_row)
    {
        if (is_null($event_row)) {
            throw new \InvalidArgumentException('non-nullable event_row cannot be null');
        }
        $this->container['event_row'] = $event_row;

        return $this;
    }

    /**
     * Gets group_info_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsGroupInfoRow|null
     */
    public function getGroupInfoRow()
    {
        return $this->container['group_info_row'];
    }

    /**
     * Sets group_info_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsGroupInfoRow|null $group_info_row group_info_row
     *
     * @return self
     */
    public function setGroupInfoRow($group_info_row)
    {
        if (is_null($group_info_row)) {
            throw new \InvalidArgumentException('non-nullable group_info_row cannot be null');
        }
        $this->container['group_info_row'] = $group_info_row;

        return $this;
    }

    /**
     * Gets image_carousel_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsImageCarouselRow|null
     */
    public function getImageCarouselRow()
    {
        return $this->container['image_carousel_row'];
    }

    /**
     * Sets image_carousel_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsImageCarouselRow|null $image_carousel_row image_carousel_row
     *
     * @return self
     */
    public function setImageCarouselRow($image_carousel_row)
    {
        if (is_null($image_carousel_row)) {
            throw new \InvalidArgumentException('non-nullable image_carousel_row cannot be null');
        }
        $this->container['image_carousel_row'] = $image_carousel_row;

        return $this;
    }

    /**
     * Gets score_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsScoreRow|null
     */
    public function getScoreRow()
    {
        return $this->container['score_row'];
    }

    /**
     * Sets score_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsScoreRow|null $score_row score_row
     *
     * @return self
     */
    public function setScoreRow($score_row)
    {
        if (is_null($score_row)) {
            throw new \InvalidArgumentException('non-nullable score_row cannot be null');
        }
        $this->container['score_row'] = $score_row;

        return $this;
    }

    /**
     * Gets selector_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsSelectorRow|null
     */
    public function getSelectorRow()
    {
        return $this->container['selector_row'];
    }

    /**
     * Sets selector_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsSelectorRow|null $selector_row selector_row
     *
     * @return self
     */
    public function setSelectorRow($selector_row)
    {
        if (is_null($selector_row)) {
            throw new \InvalidArgumentException('non-nullable selector_row cannot be null');
        }
        $this->container['selector_row'] = $selector_row;

        return $this;
    }

    /**
     * Gets semantic_paths
     *
     * @return array<string,string>|null
     */
    public function getSemanticPaths()
    {
        return $this->container['semantic_paths'];
    }

    /**
     * Sets semantic_paths
     *
     * @param array<string,string>|null $semantic_paths semantic_paths
     *
     * @return self
     */
    public function setSemanticPaths($semantic_paths)
    {
        if (is_null($semantic_paths)) {
            throw new \InvalidArgumentException('non-nullable semantic_paths cannot be null');
        }
        $this->container['semantic_paths'] = $semantic_paths;

        return $this;
    }

    /**
     * Gets subtitle_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsSubtitleRow|null
     */
    public function getSubtitleRow()
    {
        return $this->container['subtitle_row'];
    }

    /**
     * Sets subtitle_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsSubtitleRow|null $subtitle_row subtitle_row
     *
     * @return self
     */
    public function setSubtitleRow($subtitle_row)
    {
        if (is_null($subtitle_row)) {
            throw new \InvalidArgumentException('non-nullable subtitle_row cannot be null');
        }
        $this->container['subtitle_row'] = $subtitle_row;

        return $this;
    }

    /**
     * Gets title_row
     *
     * @return \Divar\KenarApiClient\Model\AddonsTitleRow|null
     */
    public function getTitleRow()
    {
        return $this->container['title_row'];
    }

    /**
     * Sets title_row
     *
     * @param \Divar\KenarApiClient\Model\AddonsTitleRow|null $title_row title_row
     *
     * @return self
     */
    public function setTitleRow($title_row)
    {
        if (is_null($title_row)) {
            throw new \InvalidArgumentException('non-nullable title_row cannot be null');
        }
        $this->container['title_row'] = $title_row;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


