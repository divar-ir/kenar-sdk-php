<?php
/**
 * SearchPostItemRealEstateFields
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * SearchPostItemRealEstateFields Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchPostItemRealEstateFields implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchPostItemRealEstateFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'credit' => '\Divar\KenarApiClient\Model\SearchPostItemPrice',
        'rent' => '\Divar\KenarApiClient\Model\SearchPostItemPrice',
        'daily_rent' => 'string',
        'size' => 'int',
        'year' => 'int',
        'has_parking' => 'bool',
        'has_elevator' => 'bool',
        'rooms' => 'string',
        'floor' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'credit' => null,
        'rent' => null,
        'daily_rent' => 'uint64',
        'size' => 'int32',
        'year' => 'int64',
        'has_parking' => null,
        'has_elevator' => null,
        'rooms' => null,
        'floor' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'credit' => false,
        'rent' => false,
        'daily_rent' => false,
        'size' => false,
        'year' => false,
        'has_parking' => false,
        'has_elevator' => false,
        'rooms' => false,
        'floor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credit' => 'credit',
        'rent' => 'rent',
        'daily_rent' => 'daily_rent',
        'size' => 'size',
        'year' => 'year',
        'has_parking' => 'has_parking',
        'has_elevator' => 'has_elevator',
        'rooms' => 'rooms',
        'floor' => 'floor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credit' => 'setCredit',
        'rent' => 'setRent',
        'daily_rent' => 'setDailyRent',
        'size' => 'setSize',
        'year' => 'setYear',
        'has_parking' => 'setHasParking',
        'has_elevator' => 'setHasElevator',
        'rooms' => 'setRooms',
        'floor' => 'setFloor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credit' => 'getCredit',
        'rent' => 'getRent',
        'daily_rent' => 'getDailyRent',
        'size' => 'getSize',
        'year' => 'getYear',
        'has_parking' => 'getHasParking',
        'has_elevator' => 'getHasElevator',
        'rooms' => 'getRooms',
        'floor' => 'getFloor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('credit', $data ?? [], null);
        $this->setIfExists('rent', $data ?? [], null);
        $this->setIfExists('daily_rent', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('has_parking', $data ?? [], null);
        $this->setIfExists('has_elevator', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credit
     *
     * @return \Divar\KenarApiClient\Model\SearchPostItemPrice|null
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param \Divar\KenarApiClient\Model\SearchPostItemPrice|null $credit credit
     *
     * @return self
     */
    public function setCredit($credit)
    {
        if (is_null($credit)) {
            throw new \InvalidArgumentException('non-nullable credit cannot be null');
        }
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets rent
     *
     * @return \Divar\KenarApiClient\Model\SearchPostItemPrice|null
     */
    public function getRent()
    {
        return $this->container['rent'];
    }

    /**
     * Sets rent
     *
     * @param \Divar\KenarApiClient\Model\SearchPostItemPrice|null $rent rent
     *
     * @return self
     */
    public function setRent($rent)
    {
        if (is_null($rent)) {
            throw new \InvalidArgumentException('non-nullable rent cannot be null');
        }
        $this->container['rent'] = $rent;

        return $this;
    }

    /**
     * Gets daily_rent
     *
     * @return string|null
     */
    public function getDailyRent()
    {
        return $this->container['daily_rent'];
    }

    /**
     * Sets daily_rent
     *
     * @param string|null $daily_rent daily_rent
     *
     * @return self
     */
    public function setDailyRent($daily_rent)
    {
        if (is_null($daily_rent)) {
            throw new \InvalidArgumentException('non-nullable daily_rent cannot be null');
        }
        $this->container['daily_rent'] = $daily_rent;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets has_parking
     *
     * @return bool|null
     */
    public function getHasParking()
    {
        return $this->container['has_parking'];
    }

    /**
     * Sets has_parking
     *
     * @param bool|null $has_parking has_parking
     *
     * @return self
     */
    public function setHasParking($has_parking)
    {
        if (is_null($has_parking)) {
            throw new \InvalidArgumentException('non-nullable has_parking cannot be null');
        }
        $this->container['has_parking'] = $has_parking;

        return $this;
    }

    /**
     * Gets has_elevator
     *
     * @return bool|null
     */
    public function getHasElevator()
    {
        return $this->container['has_elevator'];
    }

    /**
     * Sets has_elevator
     *
     * @param bool|null $has_elevator has_elevator
     *
     * @return self
     */
    public function setHasElevator($has_elevator)
    {
        if (is_null($has_elevator)) {
            throw new \InvalidArgumentException('non-nullable has_elevator cannot be null');
        }
        $this->container['has_elevator'] = $has_elevator;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return string|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param string|null $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            throw new \InvalidArgumentException('non-nullable rooms cannot be null');
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return int|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param int|null $floor floor
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            throw new \InvalidArgumentException('non-nullable floor cannot be null');
        }
        $this->container['floor'] = $floor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


