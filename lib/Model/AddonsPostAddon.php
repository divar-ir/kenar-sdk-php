<?php
/**
 * AddonsPostAddon
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * divar_interface/open_platform/chatapi/chatapi.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * AddonsPostAddon Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddonsPostAddon implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'addonsPostAddon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meta_data' => '\Divar\KenarApiClient\Model\AddonsAddonMetaData',
        'token' => 'string',
        'app' => '\Divar\KenarApiClient\Model\AppsApp',
        'widgets' => 'object',
        'score' => 'string',
        'selector' => '\Divar\KenarApiClient\Model\AddonsAddonSelector',
        'linkage' => '\Divar\KenarApiClient\Model\AddonsAddonLinkage',
        'secondary_links' => '\Divar\KenarApiClient\Model\AddonsAddonSecondaryLinks',
        'semantic' => 'array<string,string>',
        'semantic_data' => '\Divar\KenarApiClient\Model\AddonsAddonSemantic',
        'sensitive_semantic' => 'array<string,string>',
        'widgets_semantic' => 'object',
        'semantic_sensitives' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meta_data' => null,
        'token' => null,
        'app' => null,
        'widgets' => null,
        'score' => 'int64',
        'selector' => null,
        'linkage' => null,
        'secondary_links' => null,
        'semantic' => null,
        'semantic_data' => null,
        'sensitive_semantic' => null,
        'widgets_semantic' => null,
        'semantic_sensitives' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'meta_data' => false,
        'token' => false,
        'app' => false,
        'widgets' => false,
        'score' => false,
        'selector' => false,
        'linkage' => false,
        'secondary_links' => false,
        'semantic' => false,
        'semantic_data' => false,
        'sensitive_semantic' => false,
        'widgets_semantic' => false,
        'semantic_sensitives' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meta_data' => 'meta_data',
        'token' => 'token',
        'app' => 'app',
        'widgets' => 'widgets',
        'score' => 'score',
        'selector' => 'selector',
        'linkage' => 'linkage',
        'secondary_links' => 'secondary_links',
        'semantic' => 'semantic',
        'semantic_data' => 'semantic_data',
        'sensitive_semantic' => 'sensitive_semantic',
        'widgets_semantic' => 'widgets_semantic',
        'semantic_sensitives' => 'semantic_sensitives'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meta_data' => 'setMetaData',
        'token' => 'setToken',
        'app' => 'setApp',
        'widgets' => 'setWidgets',
        'score' => 'setScore',
        'selector' => 'setSelector',
        'linkage' => 'setLinkage',
        'secondary_links' => 'setSecondaryLinks',
        'semantic' => 'setSemantic',
        'semantic_data' => 'setSemanticData',
        'sensitive_semantic' => 'setSensitiveSemantic',
        'widgets_semantic' => 'setWidgetsSemantic',
        'semantic_sensitives' => 'setSemanticSensitives'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meta_data' => 'getMetaData',
        'token' => 'getToken',
        'app' => 'getApp',
        'widgets' => 'getWidgets',
        'score' => 'getScore',
        'selector' => 'getSelector',
        'linkage' => 'getLinkage',
        'secondary_links' => 'getSecondaryLinks',
        'semantic' => 'getSemantic',
        'semantic_data' => 'getSemanticData',
        'sensitive_semantic' => 'getSensitiveSemantic',
        'widgets_semantic' => 'getWidgetsSemantic',
        'semantic_sensitives' => 'getSemanticSensitives'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('app', $data ?? [], null);
        $this->setIfExists('widgets', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('selector', $data ?? [], null);
        $this->setIfExists('linkage', $data ?? [], null);
        $this->setIfExists('secondary_links', $data ?? [], null);
        $this->setIfExists('semantic', $data ?? [], null);
        $this->setIfExists('semantic_data', $data ?? [], null);
        $this->setIfExists('sensitive_semantic', $data ?? [], null);
        $this->setIfExists('widgets_semantic', $data ?? [], null);
        $this->setIfExists('semantic_sensitives', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meta_data
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonMetaData|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonMetaData|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            throw new \InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets app
     *
     * @return \Divar\KenarApiClient\Model\AppsApp|null
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param \Divar\KenarApiClient\Model\AppsApp|null $app app
     *
     * @return self
     */
    public function setApp($app)
    {
        if (is_null($app)) {
            throw new \InvalidArgumentException('non-nullable app cannot be null');
        }
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets widgets
     *
     * @return object|null
     */
    public function getWidgets()
    {
        return $this->container['widgets'];
    }

    /**
     * Sets widgets
     *
     * @param object|null $widgets widgets
     *
     * @return self
     */
    public function setWidgets($widgets)
    {
        if (is_null($widgets)) {
            throw new \InvalidArgumentException('non-nullable widgets cannot be null');
        }
        $this->container['widgets'] = $widgets;

        return $this;
    }

    /**
     * Gets score
     *
     * @return string|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param string|null $score score
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            throw new \InvalidArgumentException('non-nullable score cannot be null');
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonSelector|null
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonSelector|null $selector selector
     *
     * @return self
     */
    public function setSelector($selector)
    {
        if (is_null($selector)) {
            throw new \InvalidArgumentException('non-nullable selector cannot be null');
        }
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets linkage
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonLinkage|null
     */
    public function getLinkage()
    {
        return $this->container['linkage'];
    }

    /**
     * Sets linkage
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonLinkage|null $linkage linkage
     *
     * @return self
     */
    public function setLinkage($linkage)
    {
        if (is_null($linkage)) {
            throw new \InvalidArgumentException('non-nullable linkage cannot be null');
        }
        $this->container['linkage'] = $linkage;

        return $this;
    }

    /**
     * Gets secondary_links
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonSecondaryLinks|null
     */
    public function getSecondaryLinks()
    {
        return $this->container['secondary_links'];
    }

    /**
     * Sets secondary_links
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonSecondaryLinks|null $secondary_links secondary_links
     *
     * @return self
     */
    public function setSecondaryLinks($secondary_links)
    {
        if (is_null($secondary_links)) {
            throw new \InvalidArgumentException('non-nullable secondary_links cannot be null');
        }
        $this->container['secondary_links'] = $secondary_links;

        return $this;
    }

    /**
     * Gets semantic
     *
     * @return array<string,string>|null
     */
    public function getSemantic()
    {
        return $this->container['semantic'];
    }

    /**
     * Sets semantic
     *
     * @param array<string,string>|null $semantic semantic
     *
     * @return self
     */
    public function setSemantic($semantic)
    {
        if (is_null($semantic)) {
            throw new \InvalidArgumentException('non-nullable semantic cannot be null');
        }
        $this->container['semantic'] = $semantic;

        return $this;
    }

    /**
     * Gets semantic_data
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonSemantic|null
     */
    public function getSemanticData()
    {
        return $this->container['semantic_data'];
    }

    /**
     * Sets semantic_data
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonSemantic|null $semantic_data semantic_data
     *
     * @return self
     */
    public function setSemanticData($semantic_data)
    {
        if (is_null($semantic_data)) {
            throw new \InvalidArgumentException('non-nullable semantic_data cannot be null');
        }
        $this->container['semantic_data'] = $semantic_data;

        return $this;
    }

    /**
     * Gets sensitive_semantic
     *
     * @return array<string,string>|null
     */
    public function getSensitiveSemantic()
    {
        return $this->container['sensitive_semantic'];
    }

    /**
     * Sets sensitive_semantic
     *
     * @param array<string,string>|null $sensitive_semantic sensitive_semantic
     *
     * @return self
     */
    public function setSensitiveSemantic($sensitive_semantic)
    {
        if (is_null($sensitive_semantic)) {
            throw new \InvalidArgumentException('non-nullable sensitive_semantic cannot be null');
        }
        $this->container['sensitive_semantic'] = $sensitive_semantic;

        return $this;
    }

    /**
     * Gets widgets_semantic
     *
     * @return object|null
     */
    public function getWidgetsSemantic()
    {
        return $this->container['widgets_semantic'];
    }

    /**
     * Sets widgets_semantic
     *
     * @param object|null $widgets_semantic widgets_semantic
     *
     * @return self
     */
    public function setWidgetsSemantic($widgets_semantic)
    {
        if (is_null($widgets_semantic)) {
            throw new \InvalidArgumentException('non-nullable widgets_semantic cannot be null');
        }
        $this->container['widgets_semantic'] = $widgets_semantic;

        return $this;
    }

    /**
     * Gets semantic_sensitives
     *
     * @return string[]|null
     */
    public function getSemanticSensitives()
    {
        return $this->container['semantic_sensitives'];
    }

    /**
     * Sets semantic_sensitives
     *
     * @param string[]|null $semantic_sensitives semantic_sensitives
     *
     * @return self
     */
    public function setSemanticSensitives($semantic_sensitives)
    {
        if (is_null($semantic_sensitives)) {
            throw new \InvalidArgumentException('non-nullable semantic_sensitives cannot be null');
        }
        $this->container['semantic_sensitives'] = $semantic_sensitives;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


