<?php
/**
 * AddonsCreatePostAddonRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * divar_interface/open_platform/chatapi/chatapi.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * AddonsCreatePostAddonRequest Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddonsCreatePostAddonRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'addonsCreatePostAddonRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'widgets' => 'object',
        'selector' => '\Divar\KenarApiClient\Model\AddonsAddonSelector',
        'link_in_spec' => 'string',
        'notes' => 'string',
        'semantic' => 'array<string,string>',
        'semantic_sensitives' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token' => null,
        'widgets' => null,
        'selector' => null,
        'link_in_spec' => null,
        'notes' => null,
        'semantic' => null,
        'semantic_sensitives' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'token' => false,
        'widgets' => false,
        'selector' => false,
        'link_in_spec' => false,
        'notes' => false,
        'semantic' => false,
        'semantic_sensitives' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'widgets' => 'widgets',
        'selector' => 'selector',
        'link_in_spec' => 'link_in_spec',
        'notes' => 'notes',
        'semantic' => 'semantic',
        'semantic_sensitives' => 'semantic_sensitives'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'widgets' => 'setWidgets',
        'selector' => 'setSelector',
        'link_in_spec' => 'setLinkInSpec',
        'notes' => 'setNotes',
        'semantic' => 'setSemantic',
        'semantic_sensitives' => 'setSemanticSensitives'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'widgets' => 'getWidgets',
        'selector' => 'getSelector',
        'link_in_spec' => 'getLinkInSpec',
        'notes' => 'getNotes',
        'semantic' => 'getSemantic',
        'semantic_sensitives' => 'getSemanticSensitives'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('widgets', $data ?? [], null);
        $this->setIfExists('selector', $data ?? [], null);
        $this->setIfExists('link_in_spec', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('semantic', $data ?? [], null);
        $this->setIfExists('semantic_sensitives', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets widgets
     *
     * @return object|null
     */
    public function getWidgets()
    {
        return $this->container['widgets'];
    }

    /**
     * Sets widgets
     *
     * @param object|null $widgets widgets
     *
     * @return self
     */
    public function setWidgets($widgets)
    {
        if (is_null($widgets)) {
            throw new \InvalidArgumentException('non-nullable widgets cannot be null');
        }
        $this->container['widgets'] = $widgets;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonSelector|null
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonSelector|null $selector selector
     *
     * @return self
     */
    public function setSelector($selector)
    {
        if (is_null($selector)) {
            throw new \InvalidArgumentException('non-nullable selector cannot be null');
        }
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets link_in_spec
     *
     * @return string|null
     */
    public function getLinkInSpec()
    {
        return $this->container['link_in_spec'];
    }

    /**
     * Sets link_in_spec
     *
     * @param string|null $link_in_spec link_in_spec
     *
     * @return self
     */
    public function setLinkInSpec($link_in_spec)
    {
        if (is_null($link_in_spec)) {
            throw new \InvalidArgumentException('non-nullable link_in_spec cannot be null');
        }
        $this->container['link_in_spec'] = $link_in_spec;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets semantic
     *
     * @return array<string,string>|null
     */
    public function getSemantic()
    {
        return $this->container['semantic'];
    }

    /**
     * Sets semantic
     *
     * @param array<string,string>|null $semantic semantic
     *
     * @return self
     */
    public function setSemantic($semantic)
    {
        if (is_null($semantic)) {
            throw new \InvalidArgumentException('non-nullable semantic cannot be null');
        }
        $this->container['semantic'] = $semantic;

        return $this;
    }

    /**
     * Gets semantic_sensitives
     *
     * @return string[]|null
     */
    public function getSemanticSensitives()
    {
        return $this->container['semantic_sensitives'];
    }

    /**
     * Sets semantic_sensitives
     *
     * @param string[]|null $semantic_sensitives semantic_sensitives
     *
     * @return self
     */
    public function setSemanticSensitives($semantic_sensitives)
    {
        if (is_null($semantic_sensitives)) {
            throw new \InvalidArgumentException('non-nullable semantic_sensitives cannot be null');
        }
        $this->container['semantic_sensitives'] = $semantic_sensitives;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


