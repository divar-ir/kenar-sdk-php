<?php
/**
 * ChatapiMessage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * divar_interface/open_platform/chatapi/chatapi.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * ChatapiMessage Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChatapiMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'chatapiMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'conversation' => '\Divar\KenarApiClient\Model\ChatapiConversation',
        'sender' => '\Divar\KenarApiClient\Model\MessageSender',
        'type' => '\Divar\KenarApiClient\Model\ChatapiMessageType',
        'sent_at' => '\DateTime',
        'text' => 'string',
        'image_data' => '\Divar\KenarApiClient\Model\MessageImageData',
        'file_data' => '\Divar\KenarApiClient\Model\MessageFileData',
        'voice_data' => '\Divar\KenarApiClient\Model\MessageVoiceData',
        'location_data' => '\Divar\KenarApiClient\Model\MessageLocationData',
        'video_data' => '\Divar\KenarApiClient\Model\MessageVideoData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'conversation' => null,
        'sender' => null,
        'type' => null,
        'sent_at' => 'date-time',
        'text' => null,
        'image_data' => null,
        'file_data' => null,
        'voice_data' => null,
        'location_data' => null,
        'video_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'conversation' => false,
        'sender' => false,
        'type' => false,
        'sent_at' => false,
        'text' => false,
        'image_data' => false,
        'file_data' => false,
        'voice_data' => false,
        'location_data' => false,
        'video_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'conversation' => 'conversation',
        'sender' => 'sender',
        'type' => 'type',
        'sent_at' => 'sent_at',
        'text' => 'text',
        'image_data' => 'image_data',
        'file_data' => 'file_data',
        'voice_data' => 'voice_data',
        'location_data' => 'location_data',
        'video_data' => 'video_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'conversation' => 'setConversation',
        'sender' => 'setSender',
        'type' => 'setType',
        'sent_at' => 'setSentAt',
        'text' => 'setText',
        'image_data' => 'setImageData',
        'file_data' => 'setFileData',
        'voice_data' => 'setVoiceData',
        'location_data' => 'setLocationData',
        'video_data' => 'setVideoData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'conversation' => 'getConversation',
        'sender' => 'getSender',
        'type' => 'getType',
        'sent_at' => 'getSentAt',
        'text' => 'getText',
        'image_data' => 'getImageData',
        'file_data' => 'getFileData',
        'voice_data' => 'getVoiceData',
        'location_data' => 'getLocationData',
        'video_data' => 'getVideoData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('conversation', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('sent_at', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('image_data', $data ?? [], null);
        $this->setIfExists('file_data', $data ?? [], null);
        $this->setIfExists('voice_data', $data ?? [], null);
        $this->setIfExists('location_data', $data ?? [], null);
        $this->setIfExists('video_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets conversation
     *
     * @return \Divar\KenarApiClient\Model\ChatapiConversation|null
     */
    public function getConversation()
    {
        return $this->container['conversation'];
    }

    /**
     * Sets conversation
     *
     * @param \Divar\KenarApiClient\Model\ChatapiConversation|null $conversation conversation
     *
     * @return self
     */
    public function setConversation($conversation)
    {
        if (is_null($conversation)) {
            throw new \InvalidArgumentException('non-nullable conversation cannot be null');
        }
        $this->container['conversation'] = $conversation;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \Divar\KenarApiClient\Model\MessageSender|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \Divar\KenarApiClient\Model\MessageSender|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Divar\KenarApiClient\Model\ChatapiMessageType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Divar\KenarApiClient\Model\ChatapiMessageType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return \DateTime|null
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param \DateTime|null $sent_at sent_at
     *
     * @return self
     */
    public function setSentAt($sent_at)
    {
        if (is_null($sent_at)) {
            throw new \InvalidArgumentException('non-nullable sent_at cannot be null');
        }
        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets image_data
     *
     * @return \Divar\KenarApiClient\Model\MessageImageData|null
     */
    public function getImageData()
    {
        return $this->container['image_data'];
    }

    /**
     * Sets image_data
     *
     * @param \Divar\KenarApiClient\Model\MessageImageData|null $image_data image_data
     *
     * @return self
     */
    public function setImageData($image_data)
    {
        if (is_null($image_data)) {
            throw new \InvalidArgumentException('non-nullable image_data cannot be null');
        }
        $this->container['image_data'] = $image_data;

        return $this;
    }

    /**
     * Gets file_data
     *
     * @return \Divar\KenarApiClient\Model\MessageFileData|null
     */
    public function getFileData()
    {
        return $this->container['file_data'];
    }

    /**
     * Sets file_data
     *
     * @param \Divar\KenarApiClient\Model\MessageFileData|null $file_data file_data
     *
     * @return self
     */
    public function setFileData($file_data)
    {
        if (is_null($file_data)) {
            throw new \InvalidArgumentException('non-nullable file_data cannot be null');
        }
        $this->container['file_data'] = $file_data;

        return $this;
    }

    /**
     * Gets voice_data
     *
     * @return \Divar\KenarApiClient\Model\MessageVoiceData|null
     */
    public function getVoiceData()
    {
        return $this->container['voice_data'];
    }

    /**
     * Sets voice_data
     *
     * @param \Divar\KenarApiClient\Model\MessageVoiceData|null $voice_data voice_data
     *
     * @return self
     */
    public function setVoiceData($voice_data)
    {
        if (is_null($voice_data)) {
            throw new \InvalidArgumentException('non-nullable voice_data cannot be null');
        }
        $this->container['voice_data'] = $voice_data;

        return $this;
    }

    /**
     * Gets location_data
     *
     * @return \Divar\KenarApiClient\Model\MessageLocationData|null
     */
    public function getLocationData()
    {
        return $this->container['location_data'];
    }

    /**
     * Sets location_data
     *
     * @param \Divar\KenarApiClient\Model\MessageLocationData|null $location_data location_data
     *
     * @return self
     */
    public function setLocationData($location_data)
    {
        if (is_null($location_data)) {
            throw new \InvalidArgumentException('non-nullable location_data cannot be null');
        }
        $this->container['location_data'] = $location_data;

        return $this;
    }

    /**
     * Gets video_data
     *
     * @return \Divar\KenarApiClient\Model\MessageVideoData|null
     */
    public function getVideoData()
    {
        return $this->container['video_data'];
    }

    /**
     * Sets video_data
     *
     * @param \Divar\KenarApiClient\Model\MessageVideoData|null $video_data video_data
     *
     * @return self
     */
    public function setVideoData($video_data)
    {
        if (is_null($video_data)) {
            throw new \InvalidArgumentException('non-nullable video_data cannot be null');
        }
        $this->container['video_data'] = $video_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


