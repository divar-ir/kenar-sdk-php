<?php
/**
 * AddonsAddonSemantic
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * AddonsAddonSemantic Class Doc Comment
 *
 * @category Class
 * @description This is the message extracted by OpenPlatform from service provider semantics. Guidelines:  - Always check to see if an appropriate enum field or value exists before  adding one.  - Zero value of every enum should be {ENUM_NAME}_UNSPECIFIED.  - Enum values should not correspond to any specific post or person  attribute.
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddonsAddonSemantic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'addonsAddonSemantic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'car_verification_failure_reason' => '\Divar\KenarApiClient\Model\AddonSemanticCarVerificationStage',
        'car_verification_last_successful_stage' => '\Divar\KenarApiClient\Model\AddonSemanticCarVerificationStage',
        'identity_verification_failure_reason' => '\Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationStage',
        'identity_verification_last_successful_stage' => '\Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationStage',
        'identity_verification_result' => '\Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationResult',
        'inspection_result' => '\Divar\KenarApiClient\Model\AddonSemanticInspectionResult',
        'new_face_verification_result' => '\Divar\KenarApiClient\Model\AddonSemanticNewFaceVerificationResult',
        'ownership_result' => '\Divar\KenarApiClient\Model\AddonSemanticOwnershipResult',
        'payment_method' => '\Divar\KenarApiClient\Model\AddonsAddonSemanticPaymentMethod',
        'post_verification_result' => '\Divar\KenarApiClient\Model\AddonSemanticPostVerificationResult',
        'status' => '\Divar\KenarApiClient\Model\AddonsAddonSemanticStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'car_verification_failure_reason' => null,
        'car_verification_last_successful_stage' => null,
        'identity_verification_failure_reason' => null,
        'identity_verification_last_successful_stage' => null,
        'identity_verification_result' => null,
        'inspection_result' => null,
        'new_face_verification_result' => null,
        'ownership_result' => null,
        'payment_method' => null,
        'post_verification_result' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'car_verification_failure_reason' => false,
        'car_verification_last_successful_stage' => false,
        'identity_verification_failure_reason' => false,
        'identity_verification_last_successful_stage' => false,
        'identity_verification_result' => false,
        'inspection_result' => false,
        'new_face_verification_result' => false,
        'ownership_result' => false,
        'payment_method' => false,
        'post_verification_result' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'car_verification_failure_reason' => 'car_verification_failure_reason',
        'car_verification_last_successful_stage' => 'car_verification_last_successful_stage',
        'identity_verification_failure_reason' => 'identity_verification_failure_reason',
        'identity_verification_last_successful_stage' => 'identity_verification_last_successful_stage',
        'identity_verification_result' => 'identity_verification_result',
        'inspection_result' => 'inspection_result',
        'new_face_verification_result' => 'new_face_verification_result',
        'ownership_result' => 'ownership_result',
        'payment_method' => 'payment_method',
        'post_verification_result' => 'post_verification_result',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'car_verification_failure_reason' => 'setCarVerificationFailureReason',
        'car_verification_last_successful_stage' => 'setCarVerificationLastSuccessfulStage',
        'identity_verification_failure_reason' => 'setIdentityVerificationFailureReason',
        'identity_verification_last_successful_stage' => 'setIdentityVerificationLastSuccessfulStage',
        'identity_verification_result' => 'setIdentityVerificationResult',
        'inspection_result' => 'setInspectionResult',
        'new_face_verification_result' => 'setNewFaceVerificationResult',
        'ownership_result' => 'setOwnershipResult',
        'payment_method' => 'setPaymentMethod',
        'post_verification_result' => 'setPostVerificationResult',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'car_verification_failure_reason' => 'getCarVerificationFailureReason',
        'car_verification_last_successful_stage' => 'getCarVerificationLastSuccessfulStage',
        'identity_verification_failure_reason' => 'getIdentityVerificationFailureReason',
        'identity_verification_last_successful_stage' => 'getIdentityVerificationLastSuccessfulStage',
        'identity_verification_result' => 'getIdentityVerificationResult',
        'inspection_result' => 'getInspectionResult',
        'new_face_verification_result' => 'getNewFaceVerificationResult',
        'ownership_result' => 'getOwnershipResult',
        'payment_method' => 'getPaymentMethod',
        'post_verification_result' => 'getPostVerificationResult',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('car_verification_failure_reason', $data ?? [], null);
        $this->setIfExists('car_verification_last_successful_stage', $data ?? [], null);
        $this->setIfExists('identity_verification_failure_reason', $data ?? [], null);
        $this->setIfExists('identity_verification_last_successful_stage', $data ?? [], null);
        $this->setIfExists('identity_verification_result', $data ?? [], null);
        $this->setIfExists('inspection_result', $data ?? [], null);
        $this->setIfExists('new_face_verification_result', $data ?? [], null);
        $this->setIfExists('ownership_result', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('post_verification_result', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets car_verification_failure_reason
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticCarVerificationStage|null
     */
    public function getCarVerificationFailureReason()
    {
        return $this->container['car_verification_failure_reason'];
    }

    /**
     * Sets car_verification_failure_reason
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticCarVerificationStage|null $car_verification_failure_reason car_verification_failure_reason
     *
     * @return self
     */
    public function setCarVerificationFailureReason($car_verification_failure_reason)
    {
        if (is_null($car_verification_failure_reason)) {
            throw new \InvalidArgumentException('non-nullable car_verification_failure_reason cannot be null');
        }
        $this->container['car_verification_failure_reason'] = $car_verification_failure_reason;

        return $this;
    }

    /**
     * Gets car_verification_last_successful_stage
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticCarVerificationStage|null
     */
    public function getCarVerificationLastSuccessfulStage()
    {
        return $this->container['car_verification_last_successful_stage'];
    }

    /**
     * Sets car_verification_last_successful_stage
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticCarVerificationStage|null $car_verification_last_successful_stage car_verification_last_successful_stage
     *
     * @return self
     */
    public function setCarVerificationLastSuccessfulStage($car_verification_last_successful_stage)
    {
        if (is_null($car_verification_last_successful_stage)) {
            throw new \InvalidArgumentException('non-nullable car_verification_last_successful_stage cannot be null');
        }
        $this->container['car_verification_last_successful_stage'] = $car_verification_last_successful_stage;

        return $this;
    }

    /**
     * Gets identity_verification_failure_reason
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationStage|null
     */
    public function getIdentityVerificationFailureReason()
    {
        return $this->container['identity_verification_failure_reason'];
    }

    /**
     * Sets identity_verification_failure_reason
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationStage|null $identity_verification_failure_reason identity_verification_failure_reason
     *
     * @return self
     */
    public function setIdentityVerificationFailureReason($identity_verification_failure_reason)
    {
        if (is_null($identity_verification_failure_reason)) {
            throw new \InvalidArgumentException('non-nullable identity_verification_failure_reason cannot be null');
        }
        $this->container['identity_verification_failure_reason'] = $identity_verification_failure_reason;

        return $this;
    }

    /**
     * Gets identity_verification_last_successful_stage
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationStage|null
     */
    public function getIdentityVerificationLastSuccessfulStage()
    {
        return $this->container['identity_verification_last_successful_stage'];
    }

    /**
     * Sets identity_verification_last_successful_stage
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationStage|null $identity_verification_last_successful_stage identity_verification_last_successful_stage
     *
     * @return self
     */
    public function setIdentityVerificationLastSuccessfulStage($identity_verification_last_successful_stage)
    {
        if (is_null($identity_verification_last_successful_stage)) {
            throw new \InvalidArgumentException('non-nullable identity_verification_last_successful_stage cannot be null');
        }
        $this->container['identity_verification_last_successful_stage'] = $identity_verification_last_successful_stage;

        return $this;
    }

    /**
     * Gets identity_verification_result
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationResult|null
     */
    public function getIdentityVerificationResult()
    {
        return $this->container['identity_verification_result'];
    }

    /**
     * Sets identity_verification_result
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticIdentityVerificationResult|null $identity_verification_result identity_verification_result
     *
     * @return self
     */
    public function setIdentityVerificationResult($identity_verification_result)
    {
        if (is_null($identity_verification_result)) {
            throw new \InvalidArgumentException('non-nullable identity_verification_result cannot be null');
        }
        $this->container['identity_verification_result'] = $identity_verification_result;

        return $this;
    }

    /**
     * Gets inspection_result
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticInspectionResult|null
     */
    public function getInspectionResult()
    {
        return $this->container['inspection_result'];
    }

    /**
     * Sets inspection_result
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticInspectionResult|null $inspection_result inspection_result
     *
     * @return self
     */
    public function setInspectionResult($inspection_result)
    {
        if (is_null($inspection_result)) {
            throw new \InvalidArgumentException('non-nullable inspection_result cannot be null');
        }
        $this->container['inspection_result'] = $inspection_result;

        return $this;
    }

    /**
     * Gets new_face_verification_result
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticNewFaceVerificationResult|null
     */
    public function getNewFaceVerificationResult()
    {
        return $this->container['new_face_verification_result'];
    }

    /**
     * Sets new_face_verification_result
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticNewFaceVerificationResult|null $new_face_verification_result new_face_verification_result
     *
     * @return self
     */
    public function setNewFaceVerificationResult($new_face_verification_result)
    {
        if (is_null($new_face_verification_result)) {
            throw new \InvalidArgumentException('non-nullable new_face_verification_result cannot be null');
        }
        $this->container['new_face_verification_result'] = $new_face_verification_result;

        return $this;
    }

    /**
     * Gets ownership_result
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticOwnershipResult|null
     */
    public function getOwnershipResult()
    {
        return $this->container['ownership_result'];
    }

    /**
     * Sets ownership_result
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticOwnershipResult|null $ownership_result ownership_result
     *
     * @return self
     */
    public function setOwnershipResult($ownership_result)
    {
        if (is_null($ownership_result)) {
            throw new \InvalidArgumentException('non-nullable ownership_result cannot be null');
        }
        $this->container['ownership_result'] = $ownership_result;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonSemanticPaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonSemanticPaymentMethod|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets post_verification_result
     *
     * @return \Divar\KenarApiClient\Model\AddonSemanticPostVerificationResult|null
     */
    public function getPostVerificationResult()
    {
        return $this->container['post_verification_result'];
    }

    /**
     * Sets post_verification_result
     *
     * @param \Divar\KenarApiClient\Model\AddonSemanticPostVerificationResult|null $post_verification_result post_verification_result
     *
     * @return self
     */
    public function setPostVerificationResult($post_verification_result)
    {
        if (is_null($post_verification_result)) {
            throw new \InvalidArgumentException('non-nullable post_verification_result cannot be null');
        }
        $this->container['post_verification_result'] = $post_verification_result;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Divar\KenarApiClient\Model\AddonsAddonSemanticStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Divar\KenarApiClient\Model\AddonsAddonSemanticStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


