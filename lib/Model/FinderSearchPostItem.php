<?php
/**
 * FinderSearchPostItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Model;

use \ArrayAccess;
use \Divar\KenarApiClient\ObjectSerializer;

/**
 * FinderSearchPostItem Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FinderSearchPostItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'finderSearchPostItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'string',
        'city' => 'string',
        'community_fields' => 'object',
        'electronic_devices_fields' => 'object',
        'home_kitchen_fields' => 'object',
        'jobs_fields' => 'object',
        'last_modified_at' => '\DateTime',
        'leisure_hobbies_fields' => 'object',
        'personal_goods_fields' => 'object',
        'price' => '\Divar\KenarApiClient\Model\SearchPostItemPrice',
        'real_estate_fields' => '\Divar\KenarApiClient\Model\SearchPostItemRealEstateFields',
        'services_fields' => 'object',
        'title' => 'string',
        'token' => 'string',
        'tools_materials_equipment_fields' => 'object',
        'vehicles_fields' => '\Divar\KenarApiClient\Model\SearchPostItemVehiclesFields'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'city' => null,
        'community_fields' => null,
        'electronic_devices_fields' => null,
        'home_kitchen_fields' => null,
        'jobs_fields' => null,
        'last_modified_at' => 'date-time',
        'leisure_hobbies_fields' => null,
        'personal_goods_fields' => null,
        'price' => null,
        'real_estate_fields' => null,
        'services_fields' => null,
        'title' => null,
        'token' => null,
        'tools_materials_equipment_fields' => null,
        'vehicles_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category' => false,
        'city' => false,
        'community_fields' => false,
        'electronic_devices_fields' => false,
        'home_kitchen_fields' => false,
        'jobs_fields' => false,
        'last_modified_at' => false,
        'leisure_hobbies_fields' => false,
        'personal_goods_fields' => false,
        'price' => false,
        'real_estate_fields' => false,
        'services_fields' => false,
        'title' => false,
        'token' => false,
        'tools_materials_equipment_fields' => false,
        'vehicles_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'city' => 'city',
        'community_fields' => 'community_fields',
        'electronic_devices_fields' => 'electronic_devices_fields',
        'home_kitchen_fields' => 'home_kitchen_fields',
        'jobs_fields' => 'jobs_fields',
        'last_modified_at' => 'last_modified_at',
        'leisure_hobbies_fields' => 'leisure_hobbies_fields',
        'personal_goods_fields' => 'personal_goods_fields',
        'price' => 'price',
        'real_estate_fields' => 'real_estate_fields',
        'services_fields' => 'services_fields',
        'title' => 'title',
        'token' => 'token',
        'tools_materials_equipment_fields' => 'tools_materials_equipment_fields',
        'vehicles_fields' => 'vehicles_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'city' => 'setCity',
        'community_fields' => 'setCommunityFields',
        'electronic_devices_fields' => 'setElectronicDevicesFields',
        'home_kitchen_fields' => 'setHomeKitchenFields',
        'jobs_fields' => 'setJobsFields',
        'last_modified_at' => 'setLastModifiedAt',
        'leisure_hobbies_fields' => 'setLeisureHobbiesFields',
        'personal_goods_fields' => 'setPersonalGoodsFields',
        'price' => 'setPrice',
        'real_estate_fields' => 'setRealEstateFields',
        'services_fields' => 'setServicesFields',
        'title' => 'setTitle',
        'token' => 'setToken',
        'tools_materials_equipment_fields' => 'setToolsMaterialsEquipmentFields',
        'vehicles_fields' => 'setVehiclesFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'city' => 'getCity',
        'community_fields' => 'getCommunityFields',
        'electronic_devices_fields' => 'getElectronicDevicesFields',
        'home_kitchen_fields' => 'getHomeKitchenFields',
        'jobs_fields' => 'getJobsFields',
        'last_modified_at' => 'getLastModifiedAt',
        'leisure_hobbies_fields' => 'getLeisureHobbiesFields',
        'personal_goods_fields' => 'getPersonalGoodsFields',
        'price' => 'getPrice',
        'real_estate_fields' => 'getRealEstateFields',
        'services_fields' => 'getServicesFields',
        'title' => 'getTitle',
        'token' => 'getToken',
        'tools_materials_equipment_fields' => 'getToolsMaterialsEquipmentFields',
        'vehicles_fields' => 'getVehiclesFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('community_fields', $data ?? [], null);
        $this->setIfExists('electronic_devices_fields', $data ?? [], null);
        $this->setIfExists('home_kitchen_fields', $data ?? [], null);
        $this->setIfExists('jobs_fields', $data ?? [], null);
        $this->setIfExists('last_modified_at', $data ?? [], null);
        $this->setIfExists('leisure_hobbies_fields', $data ?? [], null);
        $this->setIfExists('personal_goods_fields', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('real_estate_fields', $data ?? [], null);
        $this->setIfExists('services_fields', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('tools_materials_equipment_fields', $data ?? [], null);
        $this->setIfExists('vehicles_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets community_fields
     *
     * @return object|null
     */
    public function getCommunityFields()
    {
        return $this->container['community_fields'];
    }

    /**
     * Sets community_fields
     *
     * @param object|null $community_fields community_fields
     *
     * @return self
     */
    public function setCommunityFields($community_fields)
    {
        if (is_null($community_fields)) {
            throw new \InvalidArgumentException('non-nullable community_fields cannot be null');
        }
        $this->container['community_fields'] = $community_fields;

        return $this;
    }

    /**
     * Gets electronic_devices_fields
     *
     * @return object|null
     */
    public function getElectronicDevicesFields()
    {
        return $this->container['electronic_devices_fields'];
    }

    /**
     * Sets electronic_devices_fields
     *
     * @param object|null $electronic_devices_fields electronic_devices_fields
     *
     * @return self
     */
    public function setElectronicDevicesFields($electronic_devices_fields)
    {
        if (is_null($electronic_devices_fields)) {
            throw new \InvalidArgumentException('non-nullable electronic_devices_fields cannot be null');
        }
        $this->container['electronic_devices_fields'] = $electronic_devices_fields;

        return $this;
    }

    /**
     * Gets home_kitchen_fields
     *
     * @return object|null
     */
    public function getHomeKitchenFields()
    {
        return $this->container['home_kitchen_fields'];
    }

    /**
     * Sets home_kitchen_fields
     *
     * @param object|null $home_kitchen_fields home_kitchen_fields
     *
     * @return self
     */
    public function setHomeKitchenFields($home_kitchen_fields)
    {
        if (is_null($home_kitchen_fields)) {
            throw new \InvalidArgumentException('non-nullable home_kitchen_fields cannot be null');
        }
        $this->container['home_kitchen_fields'] = $home_kitchen_fields;

        return $this;
    }

    /**
     * Gets jobs_fields
     *
     * @return object|null
     */
    public function getJobsFields()
    {
        return $this->container['jobs_fields'];
    }

    /**
     * Sets jobs_fields
     *
     * @param object|null $jobs_fields jobs_fields
     *
     * @return self
     */
    public function setJobsFields($jobs_fields)
    {
        if (is_null($jobs_fields)) {
            throw new \InvalidArgumentException('non-nullable jobs_fields cannot be null');
        }
        $this->container['jobs_fields'] = $jobs_fields;

        return $this;
    }

    /**
     * Gets last_modified_at
     *
     * @return \DateTime|null
     */
    public function getLastModifiedAt()
    {
        return $this->container['last_modified_at'];
    }

    /**
     * Sets last_modified_at
     *
     * @param \DateTime|null $last_modified_at last_modified_at
     *
     * @return self
     */
    public function setLastModifiedAt($last_modified_at)
    {
        if (is_null($last_modified_at)) {
            throw new \InvalidArgumentException('non-nullable last_modified_at cannot be null');
        }
        $this->container['last_modified_at'] = $last_modified_at;

        return $this;
    }

    /**
     * Gets leisure_hobbies_fields
     *
     * @return object|null
     */
    public function getLeisureHobbiesFields()
    {
        return $this->container['leisure_hobbies_fields'];
    }

    /**
     * Sets leisure_hobbies_fields
     *
     * @param object|null $leisure_hobbies_fields leisure_hobbies_fields
     *
     * @return self
     */
    public function setLeisureHobbiesFields($leisure_hobbies_fields)
    {
        if (is_null($leisure_hobbies_fields)) {
            throw new \InvalidArgumentException('non-nullable leisure_hobbies_fields cannot be null');
        }
        $this->container['leisure_hobbies_fields'] = $leisure_hobbies_fields;

        return $this;
    }

    /**
     * Gets personal_goods_fields
     *
     * @return object|null
     */
    public function getPersonalGoodsFields()
    {
        return $this->container['personal_goods_fields'];
    }

    /**
     * Sets personal_goods_fields
     *
     * @param object|null $personal_goods_fields personal_goods_fields
     *
     * @return self
     */
    public function setPersonalGoodsFields($personal_goods_fields)
    {
        if (is_null($personal_goods_fields)) {
            throw new \InvalidArgumentException('non-nullable personal_goods_fields cannot be null');
        }
        $this->container['personal_goods_fields'] = $personal_goods_fields;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Divar\KenarApiClient\Model\SearchPostItemPrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Divar\KenarApiClient\Model\SearchPostItemPrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets real_estate_fields
     *
     * @return \Divar\KenarApiClient\Model\SearchPostItemRealEstateFields|null
     */
    public function getRealEstateFields()
    {
        return $this->container['real_estate_fields'];
    }

    /**
     * Sets real_estate_fields
     *
     * @param \Divar\KenarApiClient\Model\SearchPostItemRealEstateFields|null $real_estate_fields real_estate_fields
     *
     * @return self
     */
    public function setRealEstateFields($real_estate_fields)
    {
        if (is_null($real_estate_fields)) {
            throw new \InvalidArgumentException('non-nullable real_estate_fields cannot be null');
        }
        $this->container['real_estate_fields'] = $real_estate_fields;

        return $this;
    }

    /**
     * Gets services_fields
     *
     * @return object|null
     */
    public function getServicesFields()
    {
        return $this->container['services_fields'];
    }

    /**
     * Sets services_fields
     *
     * @param object|null $services_fields services_fields
     *
     * @return self
     */
    public function setServicesFields($services_fields)
    {
        if (is_null($services_fields)) {
            throw new \InvalidArgumentException('non-nullable services_fields cannot be null');
        }
        $this->container['services_fields'] = $services_fields;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets tools_materials_equipment_fields
     *
     * @return object|null
     */
    public function getToolsMaterialsEquipmentFields()
    {
        return $this->container['tools_materials_equipment_fields'];
    }

    /**
     * Sets tools_materials_equipment_fields
     *
     * @param object|null $tools_materials_equipment_fields tools_materials_equipment_fields
     *
     * @return self
     */
    public function setToolsMaterialsEquipmentFields($tools_materials_equipment_fields)
    {
        if (is_null($tools_materials_equipment_fields)) {
            throw new \InvalidArgumentException('non-nullable tools_materials_equipment_fields cannot be null');
        }
        $this->container['tools_materials_equipment_fields'] = $tools_materials_equipment_fields;

        return $this;
    }

    /**
     * Gets vehicles_fields
     *
     * @return \Divar\KenarApiClient\Model\SearchPostItemVehiclesFields|null
     */
    public function getVehiclesFields()
    {
        return $this->container['vehicles_fields'];
    }

    /**
     * Sets vehicles_fields
     *
     * @param \Divar\KenarApiClient\Model\SearchPostItemVehiclesFields|null $vehicles_fields vehicles_fields
     *
     * @return self
     */
    public function setVehiclesFields($vehicles_fields)
    {
        if (is_null($vehicles_fields)) {
            throw new \InvalidArgumentException('non-nullable vehicles_fields cannot be null');
        }
        $this->container['vehicles_fields'] = $vehicles_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


