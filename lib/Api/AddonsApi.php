<?php
/**
 * AddonsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Divar\KenarApiClient\ApiException;
use Divar\KenarApiClient\Configuration;
use Divar\KenarApiClient\FormDataProcessor;
use Divar\KenarApiClient\HeaderSelector;
use Divar\KenarApiClient\ObjectSerializer;

/**
 * AddonsApi Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddonsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addonsCreatePostAddonV2' => [
            'application/json',
        ],
        'addonsCreateUserAddonV2' => [
            'application/json',
        ],
        'addonsCreateUserAddonV22' => [
            'application/json',
        ],
        'addonsDeletePostAddon' => [
            'application/json',
        ],
        'addonsDeletePostAddon2' => [
            'application/json',
        ],
        'addonsDeleteUserAddon' => [
            'application/json',
        ],
        'addonsGetUserAddons' => [
            'application/json',
        ],
        'addonsGetUserAddons2' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addonsCreatePostAddonV2
     *
     * Attach a new Addon to a post
     *
     * @param  string $token token (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreatePostAddonV2Body $addons_create_post_addon_v2_body addons_create_post_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreatePostAddonV2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsCreatePostAddonV2($token, $addons_create_post_addon_v2_body, string $contentType = self::contentTypes['addonsCreatePostAddonV2'][0])
    {
        list($response) = $this->addonsCreatePostAddonV2WithHttpInfo($token, $addons_create_post_addon_v2_body, $contentType);
        return $response;
    }

    /**
     * Operation addonsCreatePostAddonV2WithHttpInfo
     *
     * Attach a new Addon to a post
     *
     * @param  string $token (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreatePostAddonV2Body $addons_create_post_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreatePostAddonV2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsCreatePostAddonV2WithHttpInfo($token, $addons_create_post_addon_v2_body, string $contentType = self::contentTypes['addonsCreatePostAddonV2'][0])
    {
        $request = $this->addonsCreatePostAddonV2Request($token, $addons_create_post_addon_v2_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsCreatePostAddonV2Async
     *
     * Attach a new Addon to a post
     *
     * @param  string $token (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreatePostAddonV2Body $addons_create_post_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreatePostAddonV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsCreatePostAddonV2Async($token, $addons_create_post_addon_v2_body, string $contentType = self::contentTypes['addonsCreatePostAddonV2'][0])
    {
        return $this->addonsCreatePostAddonV2AsyncWithHttpInfo($token, $addons_create_post_addon_v2_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsCreatePostAddonV2AsyncWithHttpInfo
     *
     * Attach a new Addon to a post
     *
     * @param  string $token (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreatePostAddonV2Body $addons_create_post_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreatePostAddonV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsCreatePostAddonV2AsyncWithHttpInfo($token, $addons_create_post_addon_v2_body, string $contentType = self::contentTypes['addonsCreatePostAddonV2'][0])
    {
        $returnType = 'object';
        $request = $this->addonsCreatePostAddonV2Request($token, $addons_create_post_addon_v2_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsCreatePostAddonV2'
     *
     * @param  string $token (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreatePostAddonV2Body $addons_create_post_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreatePostAddonV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsCreatePostAddonV2Request($token, $addons_create_post_addon_v2_body, string $contentType = self::contentTypes['addonsCreatePostAddonV2'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling addonsCreatePostAddonV2'
            );
        }

        // verify the required parameter 'addons_create_post_addon_v2_body' is set
        if ($addons_create_post_addon_v2_body === null || (is_array($addons_create_post_addon_v2_body) && count($addons_create_post_addon_v2_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addons_create_post_addon_v2_body when calling addonsCreatePostAddonV2'
            );
        }


        $resourcePath = '/v2/open-platform/addons/post/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($addons_create_post_addon_v2_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($addons_create_post_addon_v2_body));
            } else {
                $httpBody = $addons_create_post_addon_v2_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsCreateUserAddonV2
     *
     * Attach a new Addon to a user
     *
     * @param  string $phone phone (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsCreateUserAddonV2($phone, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV2'][0])
    {
        list($response) = $this->addonsCreateUserAddonV2WithHttpInfo($phone, $addons_create_user_addon_v2_body, $contentType);
        return $response;
    }

    /**
     * Operation addonsCreateUserAddonV2WithHttpInfo
     *
     * Attach a new Addon to a user
     *
     * @param  string $phone (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsCreateUserAddonV2WithHttpInfo($phone, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV2'][0])
    {
        $request = $this->addonsCreateUserAddonV2Request($phone, $addons_create_user_addon_v2_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsCreateUserAddonV2Async
     *
     * Attach a new Addon to a user
     *
     * @param  string $phone (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsCreateUserAddonV2Async($phone, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV2'][0])
    {
        return $this->addonsCreateUserAddonV2AsyncWithHttpInfo($phone, $addons_create_user_addon_v2_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsCreateUserAddonV2AsyncWithHttpInfo
     *
     * Attach a new Addon to a user
     *
     * @param  string $phone (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsCreateUserAddonV2AsyncWithHttpInfo($phone, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV2'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2';
        $request = $this->addonsCreateUserAddonV2Request($phone, $addons_create_user_addon_v2_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsCreateUserAddonV2'
     *
     * @param  string $phone (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsCreateUserAddonV2Request($phone, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV2'][0])
    {

        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling addonsCreateUserAddonV2'
            );
        }

        // verify the required parameter 'addons_create_user_addon_v2_body' is set
        if ($addons_create_user_addon_v2_body === null || (is_array($addons_create_user_addon_v2_body) && count($addons_create_user_addon_v2_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addons_create_user_addon_v2_body when calling addonsCreateUserAddonV2'
            );
        }


        $resourcePath = '/v2/open-platform/addons/user/{phone}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($phone !== null) {
            $resourcePath = str_replace(
                '{' . 'phone' . '}',
                ObjectSerializer::toPathValue($phone),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($addons_create_user_addon_v2_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($addons_create_user_addon_v2_body));
            } else {
                $httpBody = $addons_create_user_addon_v2_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsCreateUserAddonV22
     *
     * Attach a new Addon to a user
     *
     * @param  string $divar_user_id divar_user_id (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV22'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsCreateUserAddonV22($divar_user_id, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV22'][0])
    {
        list($response) = $this->addonsCreateUserAddonV22WithHttpInfo($divar_user_id, $addons_create_user_addon_v2_body, $contentType);
        return $response;
    }

    /**
     * Operation addonsCreateUserAddonV22WithHttpInfo
     *
     * Attach a new Addon to a user
     *
     * @param  string $divar_user_id (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV22'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsCreateUserAddonV22WithHttpInfo($divar_user_id, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV22'][0])
    {
        $request = $this->addonsCreateUserAddonV22Request($divar_user_id, $addons_create_user_addon_v2_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsCreateUserAddonV22Async
     *
     * Attach a new Addon to a user
     *
     * @param  string $divar_user_id (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV22'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsCreateUserAddonV22Async($divar_user_id, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV22'][0])
    {
        return $this->addonsCreateUserAddonV22AsyncWithHttpInfo($divar_user_id, $addons_create_user_addon_v2_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsCreateUserAddonV22AsyncWithHttpInfo
     *
     * Attach a new Addon to a user
     *
     * @param  string $divar_user_id (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV22'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsCreateUserAddonV22AsyncWithHttpInfo($divar_user_id, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV22'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AddonsCreateUserAddonResponseV2';
        $request = $this->addonsCreateUserAddonV22Request($divar_user_id, $addons_create_user_addon_v2_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsCreateUserAddonV22'
     *
     * @param  string $divar_user_id (required)
     * @param  \Divar\KenarApiClient\Model\AddonsCreateUserAddonV2Body $addons_create_user_addon_v2_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsCreateUserAddonV22'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsCreateUserAddonV22Request($divar_user_id, $addons_create_user_addon_v2_body, string $contentType = self::contentTypes['addonsCreateUserAddonV22'][0])
    {

        // verify the required parameter 'divar_user_id' is set
        if ($divar_user_id === null || (is_array($divar_user_id) && count($divar_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $divar_user_id when calling addonsCreateUserAddonV22'
            );
        }

        // verify the required parameter 'addons_create_user_addon_v2_body' is set
        if ($addons_create_user_addon_v2_body === null || (is_array($addons_create_user_addon_v2_body) && count($addons_create_user_addon_v2_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addons_create_user_addon_v2_body when calling addonsCreateUserAddonV22'
            );
        }


        $resourcePath = '/v2/open-platform/addons/users/{divar_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($divar_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'divar_user_id' . '}',
                ObjectSerializer::toPathValue($divar_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($addons_create_user_addon_v2_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($addons_create_user_addon_v2_body));
            } else {
                $httpBody = $addons_create_user_addon_v2_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsDeletePostAddon
     *
     * Delete an Addon from a post
     *
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsDeletePostAddon($token, string $contentType = self::contentTypes['addonsDeletePostAddon'][0])
    {
        list($response) = $this->addonsDeletePostAddonWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation addonsDeletePostAddonWithHttpInfo
     *
     * Delete an Addon from a post
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsDeletePostAddonWithHttpInfo($token, string $contentType = self::contentTypes['addonsDeletePostAddon'][0])
    {
        $request = $this->addonsDeletePostAddonRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsDeletePostAddonAsync
     *
     * Delete an Addon from a post
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsDeletePostAddonAsync($token, string $contentType = self::contentTypes['addonsDeletePostAddon'][0])
    {
        return $this->addonsDeletePostAddonAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsDeletePostAddonAsyncWithHttpInfo
     *
     * Delete an Addon from a post
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsDeletePostAddonAsyncWithHttpInfo($token, string $contentType = self::contentTypes['addonsDeletePostAddon'][0])
    {
        $returnType = 'object';
        $request = $this->addonsDeletePostAddonRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsDeletePostAddon'
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsDeletePostAddonRequest($token, string $contentType = self::contentTypes['addonsDeletePostAddon'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling addonsDeletePostAddon'
            );
        }


        $resourcePath = '/v1/open-platform/add-ons/post/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsDeletePostAddon2
     *
     * Delete an Addon from a post
     *
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsDeletePostAddon2($token, string $contentType = self::contentTypes['addonsDeletePostAddon2'][0])
    {
        list($response) = $this->addonsDeletePostAddon2WithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation addonsDeletePostAddon2WithHttpInfo
     *
     * Delete an Addon from a post
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsDeletePostAddon2WithHttpInfo($token, string $contentType = self::contentTypes['addonsDeletePostAddon2'][0])
    {
        $request = $this->addonsDeletePostAddon2Request($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsDeletePostAddon2Async
     *
     * Delete an Addon from a post
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsDeletePostAddon2Async($token, string $contentType = self::contentTypes['addonsDeletePostAddon2'][0])
    {
        return $this->addonsDeletePostAddon2AsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsDeletePostAddon2AsyncWithHttpInfo
     *
     * Delete an Addon from a post
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsDeletePostAddon2AsyncWithHttpInfo($token, string $contentType = self::contentTypes['addonsDeletePostAddon2'][0])
    {
        $returnType = 'object';
        $request = $this->addonsDeletePostAddon2Request($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsDeletePostAddon2'
     *
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeletePostAddon2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsDeletePostAddon2Request($token, string $contentType = self::contentTypes['addonsDeletePostAddon2'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling addonsDeletePostAddon2'
            );
        }


        $resourcePath = '/v1/open-platform/addons/post/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsDeleteUserAddon
     *
     * Delete an UserAddon
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeleteUserAddon'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsDeleteUserAddon($id, string $contentType = self::contentTypes['addonsDeleteUserAddon'][0])
    {
        list($response) = $this->addonsDeleteUserAddonWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation addonsDeleteUserAddonWithHttpInfo
     *
     * Delete an UserAddon
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeleteUserAddon'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsDeleteUserAddonWithHttpInfo($id, string $contentType = self::contentTypes['addonsDeleteUserAddon'][0])
    {
        $request = $this->addonsDeleteUserAddonRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsDeleteUserAddonAsync
     *
     * Delete an UserAddon
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeleteUserAddon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsDeleteUserAddonAsync($id, string $contentType = self::contentTypes['addonsDeleteUserAddon'][0])
    {
        return $this->addonsDeleteUserAddonAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsDeleteUserAddonAsyncWithHttpInfo
     *
     * Delete an UserAddon
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeleteUserAddon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsDeleteUserAddonAsyncWithHttpInfo($id, string $contentType = self::contentTypes['addonsDeleteUserAddon'][0])
    {
        $returnType = 'object';
        $request = $this->addonsDeleteUserAddonRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsDeleteUserAddon'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsDeleteUserAddon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsDeleteUserAddonRequest($id, string $contentType = self::contentTypes['addonsDeleteUserAddon'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addonsDeleteUserAddon'
            );
        }


        $resourcePath = '/v1/open-platform/addons/user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsGetUserAddons
     *
     * Retrieve all UserAddons
     *
     * @param  string $phone phone (required)
     * @param  string|null $divar_user_id divar_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsGetUserAddons($phone, $divar_user_id = null, string $contentType = self::contentTypes['addonsGetUserAddons'][0])
    {
        list($response) = $this->addonsGetUserAddonsWithHttpInfo($phone, $divar_user_id, $contentType);
        return $response;
    }

    /**
     * Operation addonsGetUserAddonsWithHttpInfo
     *
     * Retrieve all UserAddons
     *
     * @param  string $phone (required)
     * @param  string|null $divar_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsGetUserAddonsWithHttpInfo($phone, $divar_user_id = null, string $contentType = self::contentTypes['addonsGetUserAddons'][0])
    {
        $request = $this->addonsGetUserAddonsRequest($phone, $divar_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsGetUserAddonsAsync
     *
     * Retrieve all UserAddons
     *
     * @param  string $phone (required)
     * @param  string|null $divar_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsGetUserAddonsAsync($phone, $divar_user_id = null, string $contentType = self::contentTypes['addonsGetUserAddons'][0])
    {
        return $this->addonsGetUserAddonsAsyncWithHttpInfo($phone, $divar_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsGetUserAddonsAsyncWithHttpInfo
     *
     * Retrieve all UserAddons
     *
     * @param  string $phone (required)
     * @param  string|null $divar_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsGetUserAddonsAsyncWithHttpInfo($phone, $divar_user_id = null, string $contentType = self::contentTypes['addonsGetUserAddons'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse';
        $request = $this->addonsGetUserAddonsRequest($phone, $divar_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsGetUserAddons'
     *
     * @param  string $phone (required)
     * @param  string|null $divar_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsGetUserAddonsRequest($phone, $divar_user_id = null, string $contentType = self::contentTypes['addonsGetUserAddons'][0])
    {

        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling addonsGetUserAddons'
            );
        }



        $resourcePath = '/v1/open-platform/addons/user/{phone}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $divar_user_id,
            'divar_user_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($phone !== null) {
            $resourcePath = str_replace(
                '{' . 'phone' . '}',
                ObjectSerializer::toPathValue($phone),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addonsGetUserAddons2
     *
     * Retrieve all UserAddons
     *
     * @param  string $divar_user_id divar_user_id (required)
     * @param  string|null $phone phone (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function addonsGetUserAddons2($divar_user_id, $phone = null, string $contentType = self::contentTypes['addonsGetUserAddons2'][0])
    {
        list($response) = $this->addonsGetUserAddons2WithHttpInfo($divar_user_id, $phone, $contentType);
        return $response;
    }

    /**
     * Operation addonsGetUserAddons2WithHttpInfo
     *
     * Retrieve all UserAddons
     *
     * @param  string $divar_user_id (required)
     * @param  string|null $phone (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addonsGetUserAddons2WithHttpInfo($divar_user_id, $phone = null, string $contentType = self::contentTypes['addonsGetUserAddons2'][0])
    {
        $request = $this->addonsGetUserAddons2Request($divar_user_id, $phone, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addonsGetUserAddons2Async
     *
     * Retrieve all UserAddons
     *
     * @param  string $divar_user_id (required)
     * @param  string|null $phone (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsGetUserAddons2Async($divar_user_id, $phone = null, string $contentType = self::contentTypes['addonsGetUserAddons2'][0])
    {
        return $this->addonsGetUserAddons2AsyncWithHttpInfo($divar_user_id, $phone, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addonsGetUserAddons2AsyncWithHttpInfo
     *
     * Retrieve all UserAddons
     *
     * @param  string $divar_user_id (required)
     * @param  string|null $phone (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addonsGetUserAddons2AsyncWithHttpInfo($divar_user_id, $phone = null, string $contentType = self::contentTypes['addonsGetUserAddons2'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AddonsGetUserAddonsResponse';
        $request = $this->addonsGetUserAddons2Request($divar_user_id, $phone, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addonsGetUserAddons2'
     *
     * @param  string $divar_user_id (required)
     * @param  string|null $phone (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addonsGetUserAddons2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addonsGetUserAddons2Request($divar_user_id, $phone = null, string $contentType = self::contentTypes['addonsGetUserAddons2'][0])
    {

        // verify the required parameter 'divar_user_id' is set
        if ($divar_user_id === null || (is_array($divar_user_id) && count($divar_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $divar_user_id when calling addonsGetUserAddons2'
            );
        }



        $resourcePath = '/v2/open-platform/addons/users/{divar_user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone,
            'phone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($divar_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'divar_user_id' . '}',
                ObjectSerializer::toPathValue($divar_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
