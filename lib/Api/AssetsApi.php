<?php
/**
 * AssetsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Divar\KenarApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Divar\KenarApiClient\ApiException;
use Divar\KenarApiClient\Configuration;
use Divar\KenarApiClient\FormDataProcessor;
use Divar\KenarApiClient\HeaderSelector;
use Divar\KenarApiClient\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'assetsGetBodyStatuses' => [
            'application/json',
        ],
        'assetsGetBrandModels' => [
            'application/json',
        ],
        'assetsGetCategories' => [
            'application/json',
        ],
        'assetsGetCities' => [
            'application/json',
        ],
        'assetsGetColors' => [
            'application/json',
        ],
        'assetsGetDistricts' => [
            'application/json',
        ],
        'assetsGetDistricts2' => [
            'application/json',
        ],
        'assetsGetInternalStorages' => [
            'application/json',
        ],
        'assetsGetOAuthScopes' => [
            'application/json',
        ],
        'assetsGetPermissions' => [
            'application/json',
        ],
        'assetsGetRamMemories' => [
            'application/json',
        ],
        'assetsGetServiceTypes' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assetsGetBodyStatuses
     *
     * Get available body-status options in Divar vehicle categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBodyStatuses'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetBodyStatusesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetBodyStatuses(string $contentType = self::contentTypes['assetsGetBodyStatuses'][0])
    {
        list($response) = $this->assetsGetBodyStatusesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetBodyStatusesWithHttpInfo
     *
     * Get available body-status options in Divar vehicle categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBodyStatuses'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetBodyStatusesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetBodyStatusesWithHttpInfo(string $contentType = self::contentTypes['assetsGetBodyStatuses'][0])
    {
        $request = $this->assetsGetBodyStatusesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetBodyStatusesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetBodyStatusesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetBodyStatusesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetBodyStatusesAsync
     *
     * Get available body-status options in Divar vehicle categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBodyStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetBodyStatusesAsync(string $contentType = self::contentTypes['assetsGetBodyStatuses'][0])
    {
        return $this->assetsGetBodyStatusesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetBodyStatusesAsyncWithHttpInfo
     *
     * Get available body-status options in Divar vehicle categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBodyStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetBodyStatusesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetBodyStatuses'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetBodyStatusesResponse';
        $request = $this->assetsGetBodyStatusesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetBodyStatuses'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBodyStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetBodyStatusesRequest(string $contentType = self::contentTypes['assetsGetBodyStatuses'][0])
    {


        $resourcePath = '/v1/open-platform/assets/body-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetBrandModels
     *
     * Get brand models in a Divar category
     *
     * @param  string $category category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBrandModels'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetBrandModelsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetBrandModels($category, string $contentType = self::contentTypes['assetsGetBrandModels'][0])
    {
        list($response) = $this->assetsGetBrandModelsWithHttpInfo($category, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetBrandModelsWithHttpInfo
     *
     * Get brand models in a Divar category
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBrandModels'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetBrandModelsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetBrandModelsWithHttpInfo($category, string $contentType = self::contentTypes['assetsGetBrandModels'][0])
    {
        $request = $this->assetsGetBrandModelsRequest($category, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetBrandModelsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetBrandModelsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetBrandModelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetBrandModelsAsync
     *
     * Get brand models in a Divar category
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBrandModels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetBrandModelsAsync($category, string $contentType = self::contentTypes['assetsGetBrandModels'][0])
    {
        return $this->assetsGetBrandModelsAsyncWithHttpInfo($category, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetBrandModelsAsyncWithHttpInfo
     *
     * Get brand models in a Divar category
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBrandModels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetBrandModelsAsyncWithHttpInfo($category, string $contentType = self::contentTypes['assetsGetBrandModels'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetBrandModelsResponse';
        $request = $this->assetsGetBrandModelsRequest($category, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetBrandModels'
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetBrandModels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetBrandModelsRequest($category, string $contentType = self::contentTypes['assetsGetBrandModels'][0])
    {

        // verify the required parameter 'category' is set
        if ($category === null || (is_array($category) && count($category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category when calling assetsGetBrandModels'
            );
        }


        $resourcePath = '/v1/open-platform/assets/brand-model/{category}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($category !== null) {
            $resourcePath = str_replace(
                '{' . 'category' . '}',
                ObjectSerializer::toPathValue($category),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetCategories
     *
     * Get Divar categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCategories'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetCategoriesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetCategories(string $contentType = self::contentTypes['assetsGetCategories'][0])
    {
        list($response) = $this->assetsGetCategoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetCategoriesWithHttpInfo
     *
     * Get Divar categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCategories'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetCategoriesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetCategoriesWithHttpInfo(string $contentType = self::contentTypes['assetsGetCategories'][0])
    {
        $request = $this->assetsGetCategoriesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetCategoriesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetCategoriesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetCategoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetCategoriesAsync
     *
     * Get Divar categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetCategoriesAsync(string $contentType = self::contentTypes['assetsGetCategories'][0])
    {
        return $this->assetsGetCategoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetCategoriesAsyncWithHttpInfo
     *
     * Get Divar categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetCategoriesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetCategories'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetCategoriesResponse';
        $request = $this->assetsGetCategoriesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetCategories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetCategoriesRequest(string $contentType = self::contentTypes['assetsGetCategories'][0])
    {


        $resourcePath = '/v1/open-platform/assets/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetCities
     *
     * Get Divar cities
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCities'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetCitiesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetCities(string $contentType = self::contentTypes['assetsGetCities'][0])
    {
        list($response) = $this->assetsGetCitiesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetCitiesWithHttpInfo
     *
     * Get Divar cities
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCities'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetCitiesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetCitiesWithHttpInfo(string $contentType = self::contentTypes['assetsGetCities'][0])
    {
        $request = $this->assetsGetCitiesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetCitiesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetCitiesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetCitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetCitiesAsync
     *
     * Get Divar cities
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetCitiesAsync(string $contentType = self::contentTypes['assetsGetCities'][0])
    {
        return $this->assetsGetCitiesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetCitiesAsyncWithHttpInfo
     *
     * Get Divar cities
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetCitiesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetCities'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetCitiesResponse';
        $request = $this->assetsGetCitiesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetCities'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetCities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetCitiesRequest(string $contentType = self::contentTypes['assetsGetCities'][0])
    {


        $resourcePath = '/v1/open-platform/assets/city';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetColors
     *
     * Get colors in a Divar category
     *
     * @param  string $category category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetColors'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetColorsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetColors($category, string $contentType = self::contentTypes['assetsGetColors'][0])
    {
        list($response) = $this->assetsGetColorsWithHttpInfo($category, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetColorsWithHttpInfo
     *
     * Get colors in a Divar category
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetColors'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetColorsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetColorsWithHttpInfo($category, string $contentType = self::contentTypes['assetsGetColors'][0])
    {
        $request = $this->assetsGetColorsRequest($category, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetColorsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetColorsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetColorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetColorsAsync
     *
     * Get colors in a Divar category
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetColors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetColorsAsync($category, string $contentType = self::contentTypes['assetsGetColors'][0])
    {
        return $this->assetsGetColorsAsyncWithHttpInfo($category, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetColorsAsyncWithHttpInfo
     *
     * Get colors in a Divar category
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetColors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetColorsAsyncWithHttpInfo($category, string $contentType = self::contentTypes['assetsGetColors'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetColorsResponse';
        $request = $this->assetsGetColorsRequest($category, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetColors'
     *
     * @param  string $category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetColors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetColorsRequest($category, string $contentType = self::contentTypes['assetsGetColors'][0])
    {

        // verify the required parameter 'category' is set
        if ($category === null || (is_array($category) && count($category) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category when calling assetsGetColors'
            );
        }


        $resourcePath = '/v1/open-platform/assets/color/{category}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($category !== null) {
            $resourcePath = str_replace(
                '{' . 'category' . '}',
                ObjectSerializer::toPathValue($category),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetDistricts
     *
     * Get Divar districts
     *
     * @param  string|null $city_slug city_slug (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetDistrictsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetDistricts($city_slug = null, string $contentType = self::contentTypes['assetsGetDistricts'][0])
    {
        list($response) = $this->assetsGetDistrictsWithHttpInfo($city_slug, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetDistrictsWithHttpInfo
     *
     * Get Divar districts
     *
     * @param  string|null $city_slug (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetDistrictsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetDistrictsWithHttpInfo($city_slug = null, string $contentType = self::contentTypes['assetsGetDistricts'][0])
    {
        $request = $this->assetsGetDistrictsRequest($city_slug, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetDistrictsAsync
     *
     * Get Divar districts
     *
     * @param  string|null $city_slug (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetDistrictsAsync($city_slug = null, string $contentType = self::contentTypes['assetsGetDistricts'][0])
    {
        return $this->assetsGetDistrictsAsyncWithHttpInfo($city_slug, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetDistrictsAsyncWithHttpInfo
     *
     * Get Divar districts
     *
     * @param  string|null $city_slug (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetDistrictsAsyncWithHttpInfo($city_slug = null, string $contentType = self::contentTypes['assetsGetDistricts'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse';
        $request = $this->assetsGetDistrictsRequest($city_slug, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetDistricts'
     *
     * @param  string|null $city_slug (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetDistrictsRequest($city_slug = null, string $contentType = self::contentTypes['assetsGetDistricts'][0])
    {



        $resourcePath = '/v1/open-platform/assets/district';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city_slug,
            'city_slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetDistricts2
     *
     * Get Divar districts
     *
     * @param  string $city_slug city_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetDistrictsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetDistricts2($city_slug, string $contentType = self::contentTypes['assetsGetDistricts2'][0])
    {
        list($response) = $this->assetsGetDistricts2WithHttpInfo($city_slug, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetDistricts2WithHttpInfo
     *
     * Get Divar districts
     *
     * @param  string $city_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts2'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetDistrictsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetDistricts2WithHttpInfo($city_slug, string $contentType = self::contentTypes['assetsGetDistricts2'][0])
    {
        $request = $this->assetsGetDistricts2Request($city_slug, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetDistricts2Async
     *
     * Get Divar districts
     *
     * @param  string $city_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetDistricts2Async($city_slug, string $contentType = self::contentTypes['assetsGetDistricts2'][0])
    {
        return $this->assetsGetDistricts2AsyncWithHttpInfo($city_slug, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetDistricts2AsyncWithHttpInfo
     *
     * Get Divar districts
     *
     * @param  string $city_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetDistricts2AsyncWithHttpInfo($city_slug, string $contentType = self::contentTypes['assetsGetDistricts2'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetDistrictsResponse';
        $request = $this->assetsGetDistricts2Request($city_slug, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetDistricts2'
     *
     * @param  string $city_slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetDistricts2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetDistricts2Request($city_slug, string $contentType = self::contentTypes['assetsGetDistricts2'][0])
    {

        // verify the required parameter 'city_slug' is set
        if ($city_slug === null || (is_array($city_slug) && count($city_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city_slug when calling assetsGetDistricts2'
            );
        }


        $resourcePath = '/v1/open-platform/assets/district/{city_slug}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($city_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'city_slug' . '}',
                ObjectSerializer::toPathValue($city_slug),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetInternalStorages
     *
     * Get available internal-storage options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetInternalStorages'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetInternalStoragesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetInternalStorages(string $contentType = self::contentTypes['assetsGetInternalStorages'][0])
    {
        list($response) = $this->assetsGetInternalStoragesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetInternalStoragesWithHttpInfo
     *
     * Get available internal-storage options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetInternalStorages'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetInternalStoragesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetInternalStoragesWithHttpInfo(string $contentType = self::contentTypes['assetsGetInternalStorages'][0])
    {
        $request = $this->assetsGetInternalStoragesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetInternalStoragesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetInternalStoragesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetInternalStoragesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetInternalStoragesAsync
     *
     * Get available internal-storage options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetInternalStorages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetInternalStoragesAsync(string $contentType = self::contentTypes['assetsGetInternalStorages'][0])
    {
        return $this->assetsGetInternalStoragesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetInternalStoragesAsyncWithHttpInfo
     *
     * Get available internal-storage options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetInternalStorages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetInternalStoragesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetInternalStorages'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetInternalStoragesResponse';
        $request = $this->assetsGetInternalStoragesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetInternalStorages'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetInternalStorages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetInternalStoragesRequest(string $contentType = self::contentTypes['assetsGetInternalStorages'][0])
    {


        $resourcePath = '/v1/open-platform/assets/internal-storage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetOAuthScopes
     *
     * Get KenarDivar OAuth scopes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetOAuthScopes'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetOAuthScopesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetOAuthScopes(string $contentType = self::contentTypes['assetsGetOAuthScopes'][0])
    {
        list($response) = $this->assetsGetOAuthScopesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetOAuthScopesWithHttpInfo
     *
     * Get KenarDivar OAuth scopes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetOAuthScopes'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetOAuthScopesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetOAuthScopesWithHttpInfo(string $contentType = self::contentTypes['assetsGetOAuthScopes'][0])
    {
        $request = $this->assetsGetOAuthScopesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetOAuthScopesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetOAuthScopesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetOAuthScopesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetOAuthScopesAsync
     *
     * Get KenarDivar OAuth scopes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetOAuthScopes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetOAuthScopesAsync(string $contentType = self::contentTypes['assetsGetOAuthScopes'][0])
    {
        return $this->assetsGetOAuthScopesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetOAuthScopesAsyncWithHttpInfo
     *
     * Get KenarDivar OAuth scopes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetOAuthScopes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetOAuthScopesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetOAuthScopes'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetOAuthScopesResponse';
        $request = $this->assetsGetOAuthScopesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetOAuthScopes'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetOAuthScopes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetOAuthScopesRequest(string $contentType = self::contentTypes['assetsGetOAuthScopes'][0])
    {


        $resourcePath = '/v1/open-platform/assets/oauth-scope';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetPermissions
     *
     * Get KenarDivar permissions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetPermissions'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetPermissionsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetPermissions(string $contentType = self::contentTypes['assetsGetPermissions'][0])
    {
        list($response) = $this->assetsGetPermissionsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetPermissionsWithHttpInfo
     *
     * Get KenarDivar permissions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetPermissions'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetPermissionsResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetPermissionsWithHttpInfo(string $contentType = self::contentTypes['assetsGetPermissions'][0])
    {
        $request = $this->assetsGetPermissionsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetPermissionsResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetPermissionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetPermissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetPermissionsAsync
     *
     * Get KenarDivar permissions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetPermissionsAsync(string $contentType = self::contentTypes['assetsGetPermissions'][0])
    {
        return $this->assetsGetPermissionsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetPermissionsAsyncWithHttpInfo
     *
     * Get KenarDivar permissions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetPermissionsAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetPermissions'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetPermissionsResponse';
        $request = $this->assetsGetPermissionsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetPermissions'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetPermissionsRequest(string $contentType = self::contentTypes['assetsGetPermissions'][0])
    {


        $resourcePath = '/v1/open-platform/assets/permission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetRamMemories
     *
     * Get available ram-memory options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetRamMemories'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetRamMemoriesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetRamMemories(string $contentType = self::contentTypes['assetsGetRamMemories'][0])
    {
        list($response) = $this->assetsGetRamMemoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetRamMemoriesWithHttpInfo
     *
     * Get available ram-memory options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetRamMemories'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetRamMemoriesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetRamMemoriesWithHttpInfo(string $contentType = self::contentTypes['assetsGetRamMemories'][0])
    {
        $request = $this->assetsGetRamMemoriesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetRamMemoriesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetRamMemoriesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetRamMemoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetRamMemoriesAsync
     *
     * Get available ram-memory options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetRamMemories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetRamMemoriesAsync(string $contentType = self::contentTypes['assetsGetRamMemories'][0])
    {
        return $this->assetsGetRamMemoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetRamMemoriesAsyncWithHttpInfo
     *
     * Get available ram-memory options in Divar mobile/tablet/laptop categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetRamMemories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetRamMemoriesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetRamMemories'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetRamMemoriesResponse';
        $request = $this->assetsGetRamMemoriesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetRamMemories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetRamMemories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetRamMemoriesRequest(string $contentType = self::contentTypes['assetsGetRamMemories'][0])
    {


        $resourcePath = '/v1/open-platform/assets/ram-memory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetServiceTypes
     *
     * Get available service types in KenarDivar
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetServiceTypes'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Divar\KenarApiClient\Model\AssetsGetServiceTypesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus
     */
    public function assetsGetServiceTypes(string $contentType = self::contentTypes['assetsGetServiceTypes'][0])
    {
        list($response) = $this->assetsGetServiceTypesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation assetsGetServiceTypesWithHttpInfo
     *
     * Get available service types in KenarDivar
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetServiceTypes'] to see the possible values for this operation
     *
     * @throws \Divar\KenarApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Divar\KenarApiClient\Model\AssetsGetServiceTypesResponse|\Divar\KenarApiClient\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetServiceTypesWithHttpInfo(string $contentType = self::contentTypes['assetsGetServiceTypes'][0])
    {
        $request = $this->assetsGetServiceTypesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\AssetsGetServiceTypesResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Divar\KenarApiClient\Model\AssetsGetServiceTypesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\AssetsGetServiceTypesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Divar\KenarApiClient\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assetsGetServiceTypesAsync
     *
     * Get available service types in KenarDivar
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetServiceTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetServiceTypesAsync(string $contentType = self::contentTypes['assetsGetServiceTypes'][0])
    {
        return $this->assetsGetServiceTypesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetServiceTypesAsyncWithHttpInfo
     *
     * Get available service types in KenarDivar
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetServiceTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetServiceTypesAsyncWithHttpInfo(string $contentType = self::contentTypes['assetsGetServiceTypes'][0])
    {
        $returnType = '\Divar\KenarApiClient\Model\AssetsGetServiceTypesResponse';
        $request = $this->assetsGetServiceTypesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetServiceTypes'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetServiceTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetServiceTypesRequest(string $contentType = self::contentTypes['assetsGetServiceTypes'][0])
    {


        $resourcePath = '/v1/open-platform/assets/service-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
