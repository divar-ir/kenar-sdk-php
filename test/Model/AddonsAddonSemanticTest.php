<?php
/**
 * AddonsAddonSemanticTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Divar\KenarApiClient\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * AddonsAddonSemanticTest Class Doc Comment
 *
 * @category    Class
 * @description This is the message extracted by OpenPlatform from service provider semantics. Guidelines:  - Always check to see if an appropriate enum field or value exists before  adding one.  - Zero value of every enum should be {ENUM_NAME}_UNSPECIFIED.  - Enum values should not correspond to any specific post or person  attribute.
 * @package     Divar\KenarApiClient
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class AddonsAddonSemanticTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "AddonsAddonSemantic"
     */
    public function testAddonsAddonSemantic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "payment_method"
     */
    public function testPropertyPaymentMethod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "identity_verification_result"
     */
    public function testPropertyIdentityVerificationResult()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "post_verification_result"
     */
    public function testPropertyPostVerificationResult()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "identity_verification_last_successful_stage"
     */
    public function testPropertyIdentityVerificationLastSuccessfulStage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "identity_verification_failure_reason"
     */
    public function testPropertyIdentityVerificationFailureReason()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "car_verification_last_successful_stage"
     */
    public function testPropertyCarVerificationLastSuccessfulStage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "car_verification_failure_reason"
     */
    public function testPropertyCarVerificationFailureReason()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ownership_result"
     */
    public function testPropertyOwnershipResult()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "inspection_result"
     */
    public function testPropertyInspectionResult()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "new_face_verification_result"
     */
    public function testPropertyNewFaceVerificationResult()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
