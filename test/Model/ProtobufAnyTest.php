<?php
/**
 * ProtobufAnyTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Divar\KenarApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kenar API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Divar\KenarApiClient\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ProtobufAnyTest Class Doc Comment
 *
 * @category    Class
 * @description &#x60;Any&#x60; شامل یک پیام protocol buffer سریالایز شده دلخواه همراه با URL که نوع پیام سریالایز شده را توضیح می‌دهد.  کتابخانه Protobuf پشتیبانی برای pack/unpack مقادیر Any را به شکل توابع کاربردی یا متدهای اضافی تولید شده نوع Any ارائه می‌دهد.  مثال 1: Pack و unpack پیام در C++.      Foo foo &#x3D; ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&amp;foo)) {       ...     }  مثال 2: Pack و unpack پیام در Java.      Foo foo &#x3D; ...;     Any any &#x3D; Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo &#x3D; any.unpack(Foo.class);     }  مثال 3: Pack و unpack پیام در Python.      foo &#x3D; Foo(...)     any &#x3D; Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  مثال 4: Pack و unpack پیام در Go       foo :&#x3D; &amp;pb.Foo{...}      any, err :&#x3D; anypb.New(foo)      if err !&#x3D; nil {        ...      }      ...      foo :&#x3D; &amp;pb.Foo{}      if err :&#x3D; any.UnmarshalTo(foo); err !&#x3D; nil {        ...      }  متدهای pack ارائه شده توسط کتابخانه protobuf به طور پیش‌فرض از &#39;type.googleapis.com/full.type.name&#39; به عنوان URL نوع استفاده می‌کنند و متدهای unpack فقط از نام نوع کاملاً واجد شرایط پس از آخرین &#39;/&#39; در URL نوع استفاده می‌کنند، مثلاً \&quot;foo.bar.com/x/y.z\&quot; نام نوع \&quot;y.z\&quot; را ایجاد می‌کند.   JSON  نمایش JSON یک مقدار &#x60;Any&#x60; از نمایش معمولی پیام deserialize شده و جاسازی شده، با یک فیلد اضافی &#x60;@type&#x60; که شامل URL نوع است، استفاده می‌کند. مثال:      package google.profile;     message Person {       string first_name &#x3D; 1;       string last_name &#x3D; 2;     }      {       \&quot;@type\&quot;: \&quot;type.googleapis.com/google.profile.Person\&quot;,       \&quot;firstName\&quot;: &lt;string&gt;,       \&quot;lastName\&quot;: &lt;string&gt;     }  اگر نوع پیام جاسازی شده شناخته شده باشد و نمایش JSON سفارشی داشته باشد، آن نمایش با افزودن فیلد &#x60;value&#x60; که JSON سفارشی را علاوه بر فیلد &#x60;@type&#x60; نگه می‌دارد، جاسازی می‌شود. مثال (برای پیام [google.protobuf.Duration][]):      {       \&quot;@type\&quot;: \&quot;type.googleapis.com/google.protobuf.Duration\&quot;,       \&quot;value\&quot;: \&quot;1.212s\&quot;     }
 * @package     Divar\KenarApiClient
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ProtobufAnyTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ProtobufAny"
     */
    public function testProtobufAny()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "at_type"
     */
    public function testPropertyAtType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
